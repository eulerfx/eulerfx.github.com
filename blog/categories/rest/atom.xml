<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: REST | Lev Gorodinski]]></title>
  <link href="http://gorodinski.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://gorodinski.com/"/>
  <updated>2014-02-27T10:49:20-05:00</updated>
  <id>http://gorodinski.com/</id>
  <author>
    <name><![CDATA[Lev Gorodinski]]></name>
    <email><![CDATA[eulerfx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Request/Acknowledge/Poll with ASP.NET WebAPI and NServiceBus]]></title>
    <link href="http://gorodinski.com/blog/2012/07/13/request-acknowledge-poll-with-nservicebus-and-aspnet-webapi/"/>
    <updated>2012-07-13T17:26:00-04:00</updated>
    <id>http://gorodinski.com/blog/2012/07/13/request-acknowledge-poll-with-nservicebus-and-aspnet-webapi</id>
    <content type="html"><![CDATA[<p><a href="http://servicedesignpatterns.com/ClientServiceInteractions/RequestAcknowledge">Request/Acknowledge</a> is a service design pattern wherein clients receive an acknowledgement as an immediate response while the original request is processed in the background. The acknowledgement typically contains a token for identifying the background task which can in turn be used to query the processing status of the task. This pattern is employed to reduce <a href="http://bit.ly/ricVKj">temporal coupling</a> which is especially critical for requests requiring a long processing times. Instead of having the client wait for the final response a pull method for querying the status of the task or a push method for notifying the client is implemented. Similarly, the <a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx">event-based asynchronous pattern</a> in <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> shares the goal of reducing wasted wait time. Request/Acknowledge/Poll is a variation of this pattern wherein a method is provided for the client to query for the status of the task being processed. The other variation is Request/Acknowledge/Callback wherein a client is notified of task status immediately via callback mechanism. The callback variation ensures that the client receives task status information as it is generated but can be a burden to implement because the client must support the callback mechanism. Furthermore, it places the additional burden of tracking and invoking callbacks upon the server. The poll variation is simpler to implement and keeps the client in control of retrieving status information as it is needed.</p>

<!--more-->


<p>The pattern consists of the following roles - the client, the service, the message queue, the request processor and the status repository. The client sends the initial request and polls the service for status information. The service receives the request, relays it to a message queue and returns an acknowledgement which typically contains a token to be used for identifying the task in subsequent status queries. The message queue serves to dismantle the temporal coupling between the sending of the request and receipt of the response. The request processor continuously dequeues messages from the queue and performs the actual processing of the request. The status repository is used to store information about the processing status of the task for retrieval by the client via the same service that accepted the initial request or by another service. Various frameworks can be utilized to implement the roles of the request/acknowledge/poll pattern and on the .NET platform a popular combination is <a href="http://www.asp.net/web-api">ASP.NET WebAPI</a> for the service, <a href="http://nservicebus.com/">NServiceBus</a> for messaging and the request processor and a dead simple implementation of the status repository backed by SQL Server or a plain old file system.</p>

<p><strong> Example Domain </strong></p>

<p>A specific example based on a production system is in order. Consider the domain of an online retailer which sources products from various suppliers, optimizes the content and pricing and posts listings on sales channels. Product information is retrieved from the suppliers website, web service or a flat file. After import, product data is sanitized, optimized and merged with existing data. The import process is seeded by a list of product <a href="http://en.wikipedia.org/wiki/Stock-keeping_unit">SKUs</a> provided by the supplier. As one can imagine, importing a product is a long running operation consisting of several steps and thus importing multiple products is also a long running operation. Furthermore, the import of multiple products bears a structure shared by processes where an identical operation is to be repeated for a set of items. The status of such processes typically contains the total number of items to be processed, the number of items processed so far as well as the number of errors.</p>

<p><strong> The service with ASP.NET WebAPI </strong></p>

<p>The service of the request/acknowledge pattern is trivial to implement because it serves a delegating role - a gateway between the client and the messaging infrastructure as well as the status repository. The ASP.NET WebAPI is an abstraction over <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a> which has specifications to fulfill the use case at hand - namely the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">202 Accepted</a> response status code as well as the <a href="http://en.wikipedia.org/wiki/HTTP_location">Location header</a> or <a href="http://www.w3.org/Protocols/9707-link-header.html">Link header</a>. Status code 202 indicates to clients that "the request has been accepted for processing, but the processing has not been completed.". The location or link header can be used to specify the location of the resource representing the status of the process.</p>

<p><div><script src='https://gist.github.com/3157819.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/3157819&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>In the sample, the import controller implements a controller resource which accepts an import request, generates a unique identifier for the task and creates an internal message to be sent with NServiceBus. Additionally, the service can handle authorization and validation. The model representing the import request, <strong>ImportRequestModel</strong>, is nearly identical to the internal command message, <strong>ImportProducts</strong>, however it is best to implement them as separate classes because they have slightly different roles and are handled by different frameworks with different constraints. The task status resource referenced in the location header can also be implemented with the WebAPI.</p>

<p><strong> The queue and request processor with NServiceBus </strong></p>

<p>An asynchronous message queue decouples the sender of a message from the receiver while ensuring message delivery despite downtime of either one. NServiceBus is an abstraction over an underlying messaging technology, typically <a href="http://en.wikipedia.org/wiki/Microsoft_Message_Queuing">MSMQ</a>. While there is a managed client for MSMQ, NServiceBus provides several industrial strength facilities beyond MSMQ that will help make the system production ready - namely <a href="http://nservicebus.com/pubsub.aspx">pub/sub</a> and <a href="http://nservicebus.com/Sagas.aspx">sagas</a>. For the request/acknowledge pattern, NServiceBus serves as a framework for implementing the queue and request processor roles. The <strong>IBus</strong> interface encapsulates the queue and a class implementing <strong>IHandleMessages</strong> will be the request processor. A saga can be used to implement the processing "loop" for importing multiple products. This saga will handle the <strong>ImportProducts</strong> message and send individual <strong>ImportProduct</strong> messages to the appropriate endpoint. This endpoint, also implemented with NServiceBus, will handle individual <strong>ImportProduct</strong> messages and publish an event upon completion or failure. The aforementioned coordinating saga will subscribe to these events in order to manage status information for the import task as a whole. The following is a sample implementation.</p>

<p><div><script src='https://gist.github.com/3161028.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/3161028&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>This saga implements the request processor with the method for handling the <strong>ImportProducts</strong> message. Furthermore, the saga entity <strong>ImportSagaData</strong> is used to track the processing status of the import task. Accordingly, this data is used to update the status of the task with the status repository. In this way, the saga coordinates the import task effectively implementing a distributed, fault tolerant processing loop. The saga data itself can be used instead of the status repository however the status repository is more convenient for a few reasons. First, the saga method <strong>MarkAsComplete</strong> deletes the saga data entity making the status unaccessible after the task complete. While it is possible to omit the call to the method, leaving it serves as documentation. Second, the saga data is persisted with the <strong>ISagaPersister</strong> which creates a dependency on the specific implementation. Third, the saga entity isn't accessible until the initial message completes processing and the entity is persisted. Depending on the size of the task, there may be a number of products that have already been imported at that point without the status being updated.</p>

<p>Utilization of a durable messaging technology, such as MSMQ, makes the system resilient to crashes and downtime all while normalizing the load curve. The endpoint which handles individual <strong>ImportProduct</strong> messages can go down in the middle of an import and pick up where it left off once it is back up. Furthermore, with the use of the NServiceBus <a href="http://nservicebus.com/Distributor.aspx">distributor</a>, processing can be scaled out transparently. A caveat in implementing the coordinating saga with NServiceBus v2.6 and below is that the default NHibernate based saga persister <a href="http://tech.groups.yahoo.com/group/nservicebus/message/12975">isn't thread safe</a> which means that the endpoint can only have a single worker thread. Given that the work performed by this saga is relatively lightweight this isn't usually an issue.</p>

<p><strong> The status repository </strong></p>

<p>The status repository can be implemented in a variety of ways and is hardly worth a mention. As a tangential aside, like the ones so forever tantalizing for software engineers, <a href="http://redis.io/">Redis</a> presents an attractive solution for the status repository because of its data structural commands such as <a href="http://redis.io/commands/INCR">INCR</a>. The status repository interface used in the example follows.</p>

<p><div><script src='https://gist.github.com/3161060.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/3161060&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>

<p><strong> Summary </strong></p>

<p>As demonstrated, it is straightforward to implement the request/acknowledge pattern with the ASP.NET WebAPI and NServiceBus. This pattern allows clients to invoke long running operations without having to be bound to the processing time. The service role is implemented with ASP.NET WebAPI. The queue and request processor roles are implemented with an NServiceBus saga, which also coordinates the processing loop. Beyond the elimination of temporal coupling the described system is resilient and horizontally scalable. Despite their conveniences, we aren't bound to any particular framework or platform - there exist a plethora of messaging technologies and web service frameworks that can fulfill the required roles. For reference, queuing can be supported by <a href="http://masstransit-project.com/">MassTransit</a> over <a href="http://www.rabbitmq.com/">RabbitMQ</a> or <a href="http://activemq.apache.org/">ActiveMQ</a>. <a href="http://en.wikipedia.org/wiki/Java_API_for_XML_Web_Services">JAX</a> on the Java platform can be used in place of ASP.NET WebAPI. Most importantly, one must understand the role each technology plays and envision the system as being composed with these roles. Care must be taken to ensure that the system isn't deeply locked into any particular vendor.</p>

<p><strong> Resources </strong></p>

<ul>
<li><a href="http://www.amazon.com/Service-Design-Patterns-Fundamental-Solutions/dp/032154420X">Service Design Patterns: Fundamental Design Solutions for SOAP/WSDL and RESTful Web Services</a></li>
<li><a href="http://www.amazon.com/RESTful-Web-Services-Cookbook-Scalability/dp/0596801688/">RESTful Web Services Cookbook: Solutions for Improving Scalability and Simplicity</a></li>
<li><a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf">SAGAS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The genealogy of REST]]></title>
    <link href="http://gorodinski.com/blog/2012/03/18/the-genealogy-of-rest/"/>
    <updated>2012-03-18T22:28:00-04:00</updated>
    <id>http://gorodinski.com/blog/2012/03/18/the-genealogy-of-rest</id>
    <content type="html"><![CDATA[<p>This is yet another take on describing <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> targeted in particular toward developers. The developer community has a difficult time accepting the REST architectural style. There are misunderstandings regarding its scope, applicability, strictness, and ultimately its value.</p>

<!--more-->


<p>One way to approach the problem of describing REST to developers is to expose the context under which the principles were devised. The term was introduced by Roy Fielding in his doctoral dissertation <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>.</p>

<p>Developers often take a value driven approach to understanding architectural concepts. It is helpful to justify architectural constraints on the basis of pragmatic concerns.</p>

<p>One of the fundamental aspects of <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a> and REST is the transparency resulting from use of <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">verbs</a> and <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">headers</a>. For a developer this is akin to a transport protocol message implementing an interface which exposes the verb, message metadata and the opaque message body. Having implemented this interface allows for reuse of certain types of behavior. A typical example is caching. HTTP caching operates based on the semantics of GET and the implication of a set of caching related HTTP message headers.</p>

<p>A common point of contention regarding REST is the notion of "hypermedia as the engine of application state" or <a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>. This notion finds an intuitive explanation and justification in the familiar interaction between a user, a browser and a website. Consider for instance a checkout sequence on an e-commerce website. The sequence may have multiple steps, such as entering shipping information, entering billing information, specifying a method of delivery, and finally order confirmation. These steps correspond to application states and the checkout sequence drives the transitions between these states. At this point, we've identified the "engine" and "application state" components of HATEOAS. What remains is hypermedia. In this example, hypermedia is the HTML returned by the website in response to state transitions invoked by the user. The returned HTML contains links which represent allowable state transitions, such as "continue to billing" resulting in an application state as follows - "shipping information entered" therefore the application is ready to accept billing information. What is of interest here is that these links are contained in the HTML or more abstractly in the resource representation returned after invoking the service. What this gains for the user/browser scenario is that neither the browser nor the user have to know in advance the URI associated with a particular state change - a trivial reduction in coupling. In this interaction, the user's responsibility is knowing his goal, his intent - placing an order on a website. The responsibility of the browser is to present the hypermedia (HTML) returned by the website to the user; the user must be able to interpret the results and have a way to invoke intended state transitions. Additionally, HATEOAS alters the division of responsibilities. The user does not need to know in advance the allowable transitions and the URIs, verbs, and representations associated with those transitions. More importantly, the user should not know the allowable transitions - that is the responsibility of the service. Specifying allowable state transitions in hypermedia is what makes hypermedia the engine of application state.</p>

<p>But is this all there is to it? What value does hypermedia bring to distributed communications between non-human agents? In the case of a human agent advancing through a checkout sequence the advantages of HATEOAS are immediately evident. A human's ability to interpret rendered HTML and detect allowable state transitions is what makes the decoupling possible. Instead of knowing exactly what HTTP message to send to what URI to send to, the human agent simply needs to know the desired state transition, such as "complete order". Suppose instead that the agent is non-human - a computer program. A program written to interact with a RESTful service can also interpret hypermedia representations and extract allowable state transitions. Instead of the program knowing the all the URIs required for the desired state transitions, the program must be able to interpret sets of allowable state transitions declared in hypermedia. Thus the coupling to resource identifiers is traded in favor of coupling to standards of declaration of state transitions, such as the link tag from Atom. For example consider this Atom document:</p>

<p><div><script src='https://gist.github.com/2087870.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/2087870&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>The entry node contains 3 link tags. The first link tag specifies the resource identifier for the entry. A client can use this URI to access a representation of the entry resource. The second link tag specifies the URI of an alternate representation of the resource, an HTML representation in particular. (Note: This is a misuse of HTTP since a single URI can be associated with multiple representations and should not be couple to a single one. Instead, representations can be requested using the Accept header.) The final link tag specifies a URI which will return an interface that can be used to edit the entry. Our understanding of the semantics of this link tag are based on a shared acceptance of the edit <a href="http://en.wikipedia.org/wiki/Link_relation">relation type</a>. The <a href="http://www.iana.org/assignments/link-relations/link-relations.xml">link relations registry</a> states the description of the "edit" relation: "Refers to a resource that can be used to edit the link's context.". The computer program must understand the relations that are of interest to the programs desired behavior. This establishes the kernel of comments which express a failure to understand the benefits of the HATEOAS constraint. These comments have a very important point - that the coupling is shifted in nature, not eliminated.</p>
]]></content>
  </entry>
  
</feed>
